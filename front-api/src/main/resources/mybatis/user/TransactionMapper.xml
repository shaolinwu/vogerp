<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.wallet.dao.TransactionDao">

	<select id="get" resultType="com.bootdo.wallet.domain.TransactionDO">
		select `id`,`accountid`,`accountVersion`,`toAccountId`,`toAccountVersion`,`tokentype`,`fromaddress`,`toaddress`,`txid`,`amount`,`frombalance`, `tobalance`,`fee`,`isusertx`,`state`,`opstype`,`remark`,`json`,`createdate` from wallet_transaction where id = #{value}
	</select>

	<select id="list" resultType="com.bootdo.wallet.domain.TransactionDO">
		select `id`,`accountid`,`accountVersion`,`toAccountId`,`toAccountVersion`,`tokentype`,`fromaddress`,`toaddress`,`txid`,`amount`,`frombalance`, `tobalance`,`fee`,`isusertx`,`state`,`opstype`,`remark`,`json`,`createdate` from wallet_transaction
        <where>  
		  		  <if test="id != null and id != ''"> and id = #{id} </if>
		  		  <if test="accountid != null and accountid != ''"> and accountid = #{accountid} </if>
		  		  <if test="accountVersion != null and accountVersion != ''"> and accountVersion = #{accountVersion} </if>
		  		  <if test="toAccountId != null and toAccountId != ''"> and toAccountId = #{toAccountId} </if>
		  		  <if test="toAccountVersion != null and toAccountVersion != ''"> and toAccountVersion = #{toAccountVersion} </if>
		  		  <if test="tokentype != null and tokentype != ''"> and tokentype = #{tokentype} </if>
		  		  <if test="fromaddress != null and fromaddress != ''"> and fromaddress = #{fromaddress} </if>
		  		  <if test="toaddress != null and toaddress != ''"> and toaddress = #{toaddress} </if>
		  		  <if test="txid != null and txid != ''"> and txid = #{txid} </if>
		  		  <if test="amount != null and amount != ''"> and amount = #{amount} </if>
		  		  <if test="fee != null and fee != ''"> and fee = #{fee} </if>
		  		  <if test="isusertx != null and isusertx != ''"> and isusertx = #{isusertx} </if>
		  		  <if test="state != null and state != ''"> and state = #{state} </if>
		  		  <if test="opstype != null and opstype != ''"> and opstype = #{opstype} </if>
		  		  <if test="createdate != null and createdate != ''"> and createdate = #{createdate} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
	<select id="list2Flow" resultType="com.bootdo.wallet.domain.TransactionDO">
        select `id`,`accountid`,`accountVersion`,`toAccountId`,`toAccountVersion`,`tokentype`,`fromaddress`,`toaddress`,`txid`,`amount`,`frombalance`, `tobalance`,`fee`,`isusertx`,`state`,`opstype`,`remark`,`json`,`createdate` from wallet_transaction
        <where>  
                  <if test="accountid != null and accountid != ''"> and accountid = #{accountid} </if>
                  <if test="toAccountId != null and toAccountId != ''"> or toAccountId = #{toAccountId} </if>
                  <if test="tokentype != null and tokentype != ''"> and tokentype = #{tokentype} </if>
                  <if test="state != null and state != ''"> and state = #{state} </if>
                </where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>
	
 	<select id="count" resultType="int">
		select count(*) from wallet_transaction
		 <where>  
		  		  <if test="id != null and id != ''"> and id = #{id} </if>
		  		  <if test="accountid != null and accountid != ''"> and accountid = #{accountid} </if>
		  		  <if test="accountVersion != null and accountVersion != ''"> and accountVersion = #{accountVersion} </if>
                  <if test="toAccountId != null and toAccountId != ''"> and toAccountId = #{toAccountId} </if>
                  <if test="toAccountVersion != null and toAccountVersion != ''"> and toAccountVersion = #{toAccountVersion} </if>
		  		  <if test="tokentype != null and tokentype != ''"> and tokentype = #{tokentype} </if>
		  		  <if test="fromaddress != null and fromaddress != ''"> and fromaddress = #{fromaddress} </if>
		  		  <if test="toaddress != null and toaddress != ''"> and toaddress = #{toaddress} </if>
		  		  <if test="txid != null and txid != ''"> and txid = #{txid} </if>
		  		  <if test="amount != null and amount != ''"> and amount = #{amount} </if>
		  		  <if test="fee != null and fee != ''"> and fee = #{fee} </if>
		  		  <if test="isusertx != null and isusertx != ''"> and isusertx = #{isusertx} </if>
		  		  <if test="state != null and state != ''"> and state = #{state} </if>
		  		  <if test="opstype != null and opstype != ''"> and opstype = #{opstype} </if>
		  		  <if test="createdate != null and createdate != ''"> and createdate = #{createdate} </if>
		  		</where>
	</select>
	
	<select id="count2Flow" resultType="int">
        select count(*) from wallet_transaction
         <where>
            <if test="accountid != null and accountid != ''"> and accountid = #{accountid} </if>
            <if test="toAccountId != null and toAccountId != ''"> or toAccountId = #{toAccountId} </if>
            <if test="tokentype != null and tokentype != ''"> and tokentype = #{tokentype} </if>
            <if test="state != null and state != ''"> and state = #{state} </if>
         </where>
    </select>
	 
	<insert id="save" parameterType="com.bootdo.wallet.domain.TransactionDO" useGeneratedKeys="true" keyProperty="id">
		insert into wallet_transaction
		(
			`id`, 
			`accountid`,`accountVersion`,`toAccountId`,`toAccountVersion`, 
			`tokentype`, 
			`fromaddress`, 
			`toaddress`, 
			`txid`, 
			`amount`, 
			`frombalance`, 
            `tobalance`, 
			`fee`, 
			`isusertx`, 
			`state`, 
			`opstype`, 
			`remark`, 
			`json`, 
			`createdate`
		)
		values
		(
			#{id}, 
			#{accountid},#{accountVersion},#{toAccountId},#{toAccountVersion},
			#{tokentype}, 
			#{fromaddress}, 
			#{toaddress}, 
			#{txid}, 
			#{amount}, 
			#{frombalance}, 
            #{tobalance}, 
			#{fee}, 
			#{isusertx}, 
			#{state}, 
			#{opstype}, 
			#{remark}, 
			#{json}, 
			#{createdate}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.wallet.domain.TransactionDO">
		update wallet_transaction 
		<set>
			<if test="txid != null">`txid` = #{txid}, </if>
			<if test="fee != null">`fee` = #{fee}</if>
		</set>
		where id = #{id}
	</update>

</mapper>