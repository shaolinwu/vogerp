<?xml version="1.0" ?>
<ns2:UIEntity xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns5="http://bmdp.shaolin.org/datamodel/PageDiagram" xmlns:ns4="http://bmdp.shaolin.org/datamodel/RDBDiagram" xmlns:ns3="http://bmdp.shaolin.org/datamodel/BEDiagram" xmlns:ns2="http://bmdp.shaolin.org/datamodel/Page" xmlns="http://bmdp.shaolin.org/datamodel/Common" xsi:schemaLocation="">
  <entityName>org.shaolin.vogerp.commonmodel.form.CEHierarchy</entityName>
  <systemVersion>0</systemVersion>
  <ns2:eventHandler functionName="createItem">
        <ns2:ops xsi:type="ns2:OpCallAjaxType" name="createItem_20151104">
            <ns2:exp>
                <ns2:expressionString><![CDATA[
                import java.util.HashMap;
                import java.util.ArrayList;
                import org.shaolin.bmdp.runtime.AppContext;
                import org.shaolin.uimaster.page.AjaxContext;
                import org.shaolin.uimaster.page.ajax.*;
                import org.shaolin.bmdp.runtime.ce.IConstantEntity;
                import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                {
                    HashMap input = new HashMap();
                    input.put("list", new ArrayList());
                    input.put("ceName", "");
                    input.put("parentCE", "");
                    input.put("parentIntValue", new Integer(0));
                    input.put("editable", new Boolean(true));
                    RefForm form = new RefForm("userForm1", "org.shaolin.vogerp.commonmodel.form.CEExtension", input);
                    @page.addElement(form);
                    form.openInWindows("Open Item", null, 600, 400);
                }
                ]]></ns2:expressionString>
            </ns2:exp>
        </ns2:ops>
    </ns2:eventHandler>
  <ns2:eventHandler functionName="addChild">
        <ns2:ops xsi:type="ns2:OpExecuteScriptType">
         <ns2:expressionString><![CDATA[
         {
          var o = this;
	      if (o.ceTree._selectedNodeName == null || o.ceTree._selectedNodeName == "") {
	          return;
	      }
          new UIMaster.ui.dialog({
              dialogType: UIMaster.ui.dialog.CONFIRM_DIALOG,
              message:'\u662F\u5426\u6DFB\u52A0\u5B50\u8282\u70B9\u5230: ' + this.ceTree._selectedNodeName,
              messageType:UIMaster.ui.dialog.Information,
              optionType:UIMaster.ui.dialog.YES_NO_OPTION,
              title:'',
              height:150,
              width:300,
              handler: function() {
                 if (o.ceTree._selectedNodeName == null || o.ceTree._selectedNodeName == "") {
                     return;
                 }
                 o.ceTree.sync();
                 UIMaster.triggerServerEvent(UIMaster.getUIID(eventsource),"addChild_20151104",UIMaster.getValue(eventsource),o.__entityName);
              }
          }).open();
          return;
         }
         ]]></ns2:expressionString>
     </ns2:ops>
       <ns2:ops xsi:type="ns2:OpCallAjaxType" name="addChild_20151104">
            <ns2:exp>
                <ns2:expressionString><![CDATA[
                import java.util.HashMap;
                import java.util.ArrayList;
                import java.util.List;
                import org.shaolin.bmdp.runtime.AppContext;
                import org.shaolin.uimaster.page.AjaxContext;
                import org.shaolin.uimaster.page.AjaxActionHelper;
                import org.shaolin.uimaster.page.ajax.*;
                import org.shaolin.bmdp.runtime.AppContext;
                import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                import org.shaolin.bmdp.runtime.ce.IConstantEntity;
                import org.shaolin.vogerp.commonmodel.be.CEExtensionImpl;
                {
                    String entityName = @page.getTree("ceTree").getSelectedItemId();
                    if (entityName == null || entityName.trim().isEmpty()) {
                        return;
                    }
                    String format = entityName.replace('-', '.');
                    entityName = format.substring(0, format.lastIndexOf("_"));
                    int parentIntValue = Integer.parseInt(format.substring(format.lastIndexOf("_") + 1));
                    
                    IConstantEntity c = AppContext.get().getConstantService().getChildren(entityName, parentIntValue);
                    if (c != null) {
                       CEExtensionImpl item = new CEExtensionImpl();
                       item.setCeName(c.getEntityName());
                       item.setIntValue(c.getConstants().size());
                       HashMap input = new HashMap();
                       input.put("beObject", item);
                       input.put("editable", new Boolean(true));
                       RefForm form = new RefForm("ceItemForm", "org.shaolin.vogerp.commonmodel.form.CEItem", input);
                       @page.addElement(form);
                       form.openInWindows("Open Item", null, 500, 300);
                    } else {
                       String prefix =  @page.getEntityUiid();
	                   int lastDot = @page.getEntityUiid().lastIndexOf('.');
	                   if (lastDot != -1) {
	                      prefix = @page.getEntityUiid().substring(0, lastDot + 1);
	                   } else {
	                      prefix = prefix + ".";
	                   }
                       HashMap input = new HashMap();
                       input.put(RefForm.RECONFIG_ORIGINAL, "selectItem");
                       input.put(RefForm.RECONFIG_OVERRIDE, prefix + "typeUI.selectFreeCE");
                       RefForm form = new RefForm("ceItemForm", "org.shaolin.vogerp.commonmodel.form.CERootList", input);
                       @page.addElement(form);
                       form.openInWindows("Open Item", null, 300, 200);
                    }
                }
                ]]></ns2:expressionString>
            </ns2:exp>
        </ns2:ops>
    </ns2:eventHandler>
    <ns2:eventHandler functionName="selectFreeCE">
        <ns2:ops xsi:type="ns2:OpCallAjaxType" name="selectFreeCE_20151104">
            <ns2:exp>
                <ns2:expressionString><![CDATA[
                import java.util.HashMap;
                import java.util.List;
                import org.shaolin.bmdp.runtime.AppContext;
                import org.shaolin.uimaster.page.AjaxContext;
                import org.shaolin.uimaster.page.ajax.*;
                import org.shaolin.bmdp.runtime.ce.IConstantEntity;
                import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                import org.shaolin.vogerp.commonmodel.be.ICEHierarchy;
                import org.shaolin.vogerp.commonmodel.be.CEHierarchyImpl;
                import org.shaolin.vogerp.commonmodel.dao.ModularityModel;
                import org.shaolin.bmdp.runtime.spi.IServerServiceManager;
                import org.shaolin.bmdp.runtime.ce.ConstantServiceImpl;
                {
                   String formId = "";
                   String entityName = ((Tree)@page.getElementByAbsoluteId("ceentityPanel.typeUI.ceTree")).getSelectedItemId();
                   if (entityName == null || entityName.trim().isEmpty()) {
                       return;
                   }
                   String format = entityName.replace('-', '.');
                   entityName = format.substring(0, format.lastIndexOf("_"));
                   int parentIntValue = Integer.parseInt(format.substring(format.lastIndexOf("_") + 1));
                   ComboBox ceList = @page.getComboBox("typeUI");
                   String selectedCE = ceList.getSelectedDisplayValue();
                   
                   CEHierarchyImpl hierarchy = new CEHierarchyImpl();
                   hierarchy.setParentCeName(entityName);
                   hierarchy.setParentCeItem(parentIntValue);
                   hierarchy.setCeName(selectedCE);
                   ModularityModel.INSTANCE.create(hierarchy);
                   
                   CEHierarchyImpl condition = new CEHierarchyImpl();
			       condition.setParentCeItem(-1);
			       List hierarchies = ModularityModel.INSTANCE.searchCEHierarchy(condition, null, 0, -1);
                   ConstantServiceImpl constantService = (ConstantServiceImpl) IServerServiceManager.INSTANCE.getConstantService();
                   constantService.reloadHierarchy(hierarchies);
                   
                   RefForm form = (RefForm)@page.getElement(@page.getEntityUiid()); 
                   form.closeIfinWindows(true);
                   @page.removeForm(@page.getEntityUiid()); 
                }
                ]]></ns2:expressionString>
            </ns2:exp>
        </ns2:ops>
    </ns2:eventHandler>
    <ns2:eventHandler functionName="openItem">
        <ns2:ops xsi:type="ns2:OpExecuteScriptType">
	        <ns2:expressionString><![CDATA[
	        {
	           this.ceTree.sync();
	        }
	        ]]></ns2:expressionString>
	    </ns2:ops>
        <ns2:ops xsi:type="ns2:OpCallAjaxType" name="openItem_20151104">
            <ns2:exp>
                <ns2:expressionString><![CDATA[
                import java.util.HashMap;
                import java.util.List;
                import org.shaolin.bmdp.runtime.AppContext;
                import org.shaolin.uimaster.page.AjaxContext;
                import org.shaolin.uimaster.page.ajax.*;
                import org.shaolin.bmdp.runtime.ce.IConstantEntity;
                import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                {
                    String entityName = @page.getTree("ceTree").getSelectedItemId();
                    if (entityName == null || entityName.trim().isEmpty()) {
                        return;
                    }
                    if (entityName.indexOf('-') != -1) {
	                    String format = entityName.replace('-', '.');
	                    entityName = format.substring(0, format.lastIndexOf("_"));
	                    try {
		                    int parentIntValue = Integer.parseInt(format.substring(format.lastIndexOf("_") + 1));
		                    IConstantEntity c = AppContext.get().getConstantService().getConstantItem(entityName, parentIntValue);
		                    HashMap input = new HashMap();
		                    input.put("beObject", CEOperationUtil.convertSingD2C(c));
		                    input.put("editable", new Boolean(true));
		                    RefForm form = new RefForm("userForm", "org.shaolin.vogerp.commonmodel.form.CEItem", input);
		                    @page.addElement(form);
		                    
		                    form.openInWindows("Open Item", null, 500, 300);
	                    } catch (Exception e) {}
                    }
                }
                ]]></ns2:expressionString>
            </ns2:exp>
        </ns2:ops>
    </ns2:eventHandler>
  <ns2:eventHandler functionName="deleteItem">
    <ns2:ops xsi:type="ns2:OpExecuteScriptType">
         <ns2:expressionString><![CDATA[
         {
          var o = this;
          if (o.ceTree._selectedNodeName == null || o.ceTree._selectedNodeName == "") {
              return;
          }
          new UIMaster.ui.dialog({
              dialogType: UIMaster.ui.dialog.CONFIRM_DIALOG,
              message:'Are you sure delete this node?',
              messageType:UIMaster.ui.dialog.Warning,
              optionType:UIMaster.ui.dialog.YES_NO_OPTION,
              title:'\u5220\u9664\u8282\u70B9?',
              height:150,
              width:300,
              handler: function() {
                 if (o.ceTree._selectedNodeName == null || o.ceTree._selectedNodeName == "") {
		             return;
		         }
		         o.ceTree.sync();
                 UIMaster.triggerServerEvent(UIMaster.getUIID(eventsource),"deleteItem_2040990210",UIMaster.getValue(eventsource),o.__entityName);
                 o.ceTree._treeObj.delete_node(o.ceTree._treeObj.get_selected());
              }
          }).open();
          return;
         }
         ]]></ns2:expressionString>
     </ns2:ops>
    <ns2:ops xsi:type="ns2:OpCallAjaxType" name="deleteItem_2040990210">
      <ns2:exp>
        <expressionString><![CDATA[
        import java.util.List;
        import org.shaolin.uimaster.page.AjaxContext;
        import org.shaolin.bmdp.runtime.AppContext;
        import org.shaolin.uimaster.page.ajax.*;
		import org.shaolin.bmdp.runtime.ce.ConstantServiceImpl;
        import org.shaolin.vogerp.commonmodel.be.CEExtensionImpl;
        import org.shaolin.vogerp.commonmodel.dao.ModularityModel;
        import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
        import org.shaolin.bmdp.runtime.ce.ConstantServiceImpl;
        import org.shaolin.bmdp.runtime.spi.IAppServiceManager;
        import org.shaolin.vogerp.commonmodel.IDynamicUIService;
        { 
          String entityName = @page.getTree("ceTree").getSelectedItemId();
          if (entityName == null || entityName.trim().isEmpty()) {
              return;
          }
          String format = "";
          if (entityName.indexOf('-') != -1) {
              format = entityName.replace('-', '.');
              entityName = format.substring(0, format.lastIndexOf("_"));
          } else {
              format = entityName;
              entityName = format.substring(0, format.lastIndexOf("_"));
          }
          int intValue = Integer.parseInt(format.substring(format.lastIndexOf("_") + 1));
          IDynamicUIService service=(IDynamicUIService)AppContext.get().getService(IDynamicUIService.class); 
          service.deleteCENode(entityName, intValue);
        
        }]]></expressionString>
      </ns2:exp>
    </ns2:ops>
  </ns2:eventHandler>
  <ns2:eventHandler functionName="refreshItem">
    <ns2:ops xsi:type="ns2:OpCallAjaxType" name="refreshItem_20151108">
      <ns2:exp>
        <expressionString><![CDATA[
        import java.util.List;
        import org.shaolin.uimaster.page.AjaxContext;
        import org.shaolin.bmdp.runtime.AppContext;
        import org.shaolin.uimaster.page.ajax.*;
        import org.shaolin.bmdp.runtime.ce.ConstantServiceImpl;
        import org.shaolin.vogerp.commonmodel.be.CEExtensionImpl;
        import org.shaolin.vogerp.commonmodel.dao.ModularityModel;
        import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
        import org.shaolin.bmdp.runtime.ce.ConstantServiceImpl;
        import org.shaolin.bmdp.runtime.spi.IAppServiceManager;
        { 
           String entityName = @page.getTree("ceTree").getSelectedItemId();
           if (entityName == null || entityName.trim().isEmpty()) {
               return;
           }
           @page.getTree("ceTree").refresh();
        }]]></expressionString>
      </ns2:exp>
    </ns2:ops>
  </ns2:eventHandler>
  <ns2:eventHandler functionName="dblclickTreeNode">
     <ns2:ops xsi:type="ns2:OpExecuteScriptType">
        <ns2:expressionString><![CDATA[
        {   
            this.openItem(this.ceTree, event);
        }
        ]]></ns2:expressionString>
    </ns2:ops>
  </ns2:eventHandler>
  <ns2:eventHandler functionName="clickTreeNode">
  </ns2:eventHandler>
  <ns2:reconfigurableProperty functionName="clickTreeNode" xsi:type="ns2:ReconfigurableFunctionType"/>
  <ns2:body xsi:type="ns2:UIPanelType" UIID="Form">
    <ns2:layout xsi:type="ns2:TableLayoutType">
      <ns2:rowHeightWeight>0.0</ns2:rowHeightWeight>
      <ns2:rowHeightWeight>0.0</ns2:rowHeightWeight>
      <ns2:columnWidthWeight>-1.0</ns2:columnWidthWeight>
    </ns2:layout>
    <ns2:component xsi:type="ns2:UIPanelType" UIID="fieldPanel">
      <ns2:layout xsi:type="ns2:TableLayoutType">
        <ns2:rowHeightWeight>0.0</ns2:rowHeightWeight>
        <ns2:columnWidthWeight>1.0</ns2:columnWidthWeight>
      </ns2:layout>
      <ns2:component xsi:type="ns2:UIHiddenType" UIID="selectCENameUI">
          <ns2:secure>true</ns2:secure>
      </ns2:component>
	  <ns2:component xsi:type="ns2:UIWebTreeType" UIID="ceTree">
	      <ns2:title xsi:type="ns2:StringPropertyType">
	          <ns2:value>Constant Hierarchy</ns2:value>
	      </ns2:title>
	      <ns2:opened>true</ns2:opened>
	      <ns2:nodeIcon>/images/nodeicon.jpg</ns2:nodeIcon>
	      <ns2:itemIcon>/images/itemicon.jpg</ns2:itemIcon>
	      <ns2:selectMode>Multiple</ns2:selectMode>
	      <ns2:selectNodeEvent>clickTreeNode</ns2:selectNodeEvent>
	      <ns2:dblselectNodeEvent>dblclickTreeNode</ns2:dblselectNodeEvent>
	      <ns2:deleteNodeEvent>moveNode</ns2:deleteNodeEvent>
	      <ns2:initExpression xsi:type="ns2:ExpressionPropertyType">
              <ns2:expression xsi:type="ns2:ExpressionType">
                  <ns2:expressionString><![CDATA[
                  import java.util.ArrayList;
                  import org.shaolin.bmdp.runtime.AppContext;
                  import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                  {
                      ArrayList result = new ArrayList();
                      CEOperationUtil.getCEHierarchy($openLevels, result, null, AppContext.get().getConstantService().getConstantEntity($ceName));
                      return result;
                  }]]></ns2:expressionString>
              </ns2:expression>
          </ns2:initExpression>
          <ns2:expandExpression xsi:type="ns2:ExpressionPropertyType">
              <ns2:expression xsi:type="ns2:ExpressionType">
                  <ns2:expressionString><![CDATA[
                  import java.util.ArrayList;
                  import org.shaolin.bmdp.runtime.AppContext;
                  import org.shaolin.vogerp.commonmodel.util.CEOperationUtil;
                  import org.shaolin.bmdp.runtime.ce.IConstantEntity;
                  {
                      if ($selectedNode.indexOf('-') != -1) {
	                      String format = $selectedNode.replace('-', '.');
	                      String parentCe = format.substring(0, format.lastIndexOf("_"));
	                      int parentIntValue = 0;
	                      try {
	                          parentIntValue = Integer.parseInt(format.substring(format.lastIndexOf("_") + 1));
	                          IConstantEntity kid = AppContext.get().getConstantService().getChildren(parentCe, parentIntValue);
		                      ArrayList result = new ArrayList();
		                      CEOperationUtil.getCEChildren(result, kid);
		                      return result;
	                      } catch (Exception e) {
	                          //parent reload
	                          return new ArrayList();
	                      }
                      } else {
                          // reload entire tree.
                          ArrayList result = new ArrayList();
                          CEOperationUtil.getCEHierarchy(2, result, null, AppContext.get().getConstantService().getConstantEntity($selectedNode));
                          return result;
                      }
                  }
                  ]]></ns2:expressionString>
              </ns2:expression>
          </ns2:expandExpression>
	      <ns2:action>
              <ns2:uiid>createItem</ns2:uiid>
              <ns2:title xsi:type="ns2:StringPropertyType">
                  <ns2:value>新建</ns2:value>
              </ns2:title>
              <ns2:icon>ui-icon-note</ns2:icon>
              <ns2:function>createItem</ns2:function>
          </ns2:action>
	      <ns2:action>
              <ns2:uiid>openItem</ns2:uiid>
              <ns2:title xsi:type="ns2:StringPropertyType">
                  <ns2:value>编辑</ns2:value>
              </ns2:title>
              <ns2:icon>ui-icon-note</ns2:icon>
              <ns2:function>openItem</ns2:function>
          </ns2:action>
          <ns2:action>
              <ns2:uiid>addChild</ns2:uiid>
              <ns2:title xsi:type="ns2:StringPropertyType">
                  <ns2:value>添加子节点</ns2:value>
              </ns2:title>
              <ns2:icon>ui-icon-note</ns2:icon>
              <ns2:function>addChild</ns2:function>
          </ns2:action>
          <ns2:action>
              <ns2:uiid>deleteItem</ns2:uiid>
              <ns2:title xsi:type="ns2:StringPropertyType">
                  <ns2:value>删除</ns2:value>
              </ns2:title>
              <ns2:icon>ui-icon-note</ns2:icon>
              <ns2:function>deleteItem</ns2:function>
          </ns2:action>
          <ns2:action>
              <ns2:uiid>refreshItem</ns2:uiid>
              <ns2:title xsi:type="ns2:StringPropertyType">
                  <ns2:value>刷新</ns2:value>
              </ns2:title>
              <ns2:icon>ui-icon-note</ns2:icon>
              <ns2:function>refreshItem</ns2:function>
          </ns2:action>
		  </ns2:component>
	     <ns2:layoutConstraint>
	        <ns2:componentId>ceTree</ns2:componentId>
	        <ns2:constraint xsi:type="ns2:TableLayoutConstraintType" x="0" y="0" align="FULL"></ns2:constraint>
      </ns2:layoutConstraint>
    </ns2:component>
    <ns2:component xsi:type="ns2:UIPanelType" UIID="actionPanel">
      <ns2:layout xsi:type="ns2:TableLayoutType">
        <ns2:rowHeightWeight>0.0</ns2:rowHeightWeight>
        <ns2:columnWidthWeight>-1.0</ns2:columnWidthWeight>
      </ns2:layout>
    </ns2:component>
    <ns2:layoutConstraint>
      <ns2:componentId>fieldPanel</ns2:componentId>
      <ns2:constraint xsi:type="ns2:TableLayoutConstraintType" x="0" y="0" align="FULL"></ns2:constraint>
    </ns2:layoutConstraint>
    <ns2:layoutConstraint>
      <ns2:componentId>actionPanel</ns2:componentId>
      <ns2:constraint xsi:type="ns2:TableLayoutConstraintType" x="0" y="1" align="FULL"></ns2:constraint>
    </ns2:layoutConstraint>
  </ns2:body>
  <ns2:mapping>
    <systemVersion>0</systemVersion>
    <ns2:DataEntity scope="InOut" name="editable" category="JavaPrimitive">
      <type entityName="java.lang.Boolean"></type>
    </ns2:DataEntity>
    <ns2:DataEntity scope="InOut" name="disableRemove" category="JavaPrimitive">
      <type entityName="java.lang.Boolean"></type>
    </ns2:DataEntity>
    <ns2:DataEntity scope="InOut" name="openLevels" category="JavaPrimitive">
      <type entityName="java.lang.Integer"></type>
    </ns2:DataEntity>
    <ns2:DataEntity scope="InOut" name="ceName" category="JavaPrimitive">
      <type entityName="java.lang.String"></type>
    </ns2:DataEntity>
    <ns2:ComponentMapping xsi:type="ns2:SimpleComponentMappingType" name="simpleMapping0">
						<ns2:mappingRule entityName="org.shaolin.uimaster.page.od.rules.UIText"></ns2:mappingRule>
						<ns2:UIComponent componentPath="selectCENameUI" paramName="UIWidgetType"></ns2:UIComponent>
						<ns2:DataComponent xsi:type="ns2:ComponentParamType"
							componentPath="ceName" paramName="StringData"></ns2:DataComponent>
				</ns2:ComponentMapping>
    <ns2:DataToUIMappingOperation>
      <expressionString><![CDATA[
      {
        if ($openLevels == null) {
            $openLevels = new Integer(2);
        }
	       @odContext.executeAllMappings();
      }   
    ]]></expressionString>
    </ns2:DataToUIMappingOperation>
    <ns2:UIToDataMappingOperation>
      <expressionString>
      {
					   @odContext.executeAllMappings();
				  }
	  </expressionString>
    </ns2:UIToDataMappingOperation>
  </ns2:mapping>
</ns2:UIEntity>